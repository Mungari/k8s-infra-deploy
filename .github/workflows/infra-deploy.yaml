name: deploy infrastructure
run-name: big-bang
on: [workflow_dispatch]
jobs:
  provision_cluster:
    runs-on: self-hosted
    steps:
      - name: "Change ownership"
        run: sudo chown -R $USER:$USER ~/actions-runner/_work/k8s-infra-deploy

      - name: "Checkout repo"
        uses: actions/checkout@v3

      - name: "Fix permissions for key"
        run: chmod 600 terraform/configs/root

      - name: "Check if nodes are deployed"
        run: echo NODES_RUNNING=$(sudo virsh list --all | grep k8s | wc -l)>>$GITHUB_OUTPUT
        id: checker
      
      - name: "Deploy cluster"
        if: ${{ steps.checker.outputs.NODES_RUNNING == 0 }}
        run: sudo terraform -chdir=terraform init && sudo terraform -chdir=terraform plan && sudo terraform -chdir=terraform apply --auto-approve
      
      - name: "Check if ips are duplicate"
        id: duplicate
        run: DUPLICATE=$(sudo virsh net-dhcp-leases default | wc -l)>>$GITHUB_OUTPUT; echo $DUPLICATE

      - name: "Cleanup dnsmasq"
        if: (steps.checker.outputs.NODES_RUNNING != 0) && (steps.duplicate.outputs.DUPLICATE > 5)
        run: sudo rm /var/lib/libvirt/dnsmasq/virbr0.*

      - name: "Restart machines"
        if: ${{ steps.checker.outputs.NODES_RUNNING != 0 }}
        run: | 
          for vm in $(sudo virsh list --all | awk {'print $2'} | grep k8s); do \
          case $(echo -n $(sudo virsh domstate $vm)) in \
          "shut off") \
            sudo virsh start $vm \
            ;; \
          "running") \
            sudo virsh reboot $vm \
            ;; \
          esac \
          ; done 

      - name: "Check cluster running"
        run: | 
          while [[ $(sudo virsh list --all | awk {'print $3'} | grep running | wc -l) -lt 3 ]]; do \
            echo "Waiting for all VMs to be up and running... $(sudo virsh list --all | awk {'print $3'} | grep running | wc -l)/3";\
            sleep 0.5 \;
          done

      - uses: nick-fields/retry@v2
        name: "Check if cluster is configured"
        id: health
        if: ${{ steps.checker.outputs.NODES_RUNNING != 0 }}
        with:
          max_attempts: 3
          timeout_minutes: 2
          command: echo BOOTSTRAPPED_NODES=$(ssh -o StrictHostKeyChecking=no -i terraform/configs/root root@$(sudo virsh domifaddr k8s-master | grep -ohe "192.*" | cut -d"/" -f1) "kubectl get nodes | grep worker | wc -l")>>$GITHUB_OUTPUT

      - name: "Get cluster IPs"
        if: ${{ steps.health.outputs.BOOTSTRAPPED_NODES == 0 }}
        run: utils/gather_hosts.sh

      - name: "Configure cluster if it's not configured"
        if: ${{ steps.health.outputs.BOOTSTRAPPED_NODES == 0 }}
        run: cd ansible; ansible-galaxy install -r roles/requirements.yml; ansible-playbook -i inventory/hosts main.yml